services:
  webserver:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: buldok_prod_webserver
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Copying initial config...'
        cp /etc/nginx/configs/nginx.init.conf /etc/nginx/conf.d/default.conf

        echo 'Starting Nginx in background...'
        nginx &
        
        # Give Nginx a moment to start and create its PID file
        sleep 2;

        echo 'Waiting for certificate...'
        until [ -f /etc/letsencrypt/live/buldok.app/fullchain.pem ]; do 
          sleep 5; 
        done;
        
        echo 'Certificate found. Copying production config.'
        cp /etc/nginx/configs/nginx.prod.conf /etc/nginx/conf.d/default.conf
        
        echo 'Reloading Nginx...'
        nginx -s reload
        
        echo 'Nginx is running in the background. Keeping container alive...'
        # Use tail to keep the script running indefinitely
        tail -f /dev/null
      "
    ports:
      - "80:80"
      - "443:443"
    volumes:
      #- ./nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      #- ./nginx.init.conf:/etc/nginx/init.conf:ro
      - ./:/etc/nginx/configs:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - backend
    networks:
      - buldok-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: buldok_prod_backend
    restart: unless-stopped
    environment:
      APP_ENV: prod
      APP_DEBUG: 0
      DATABASE_URL: "${DATABASE_URL}"
      MERCURE_URL: "http://mercure/.well-known/mercure"
      MERCURE_PUBLIC_URL: "https://buldok.app/.well-known/mercure"
      MERCURE_JWT_SECRET: "${MERCURE_JWT_SECRET}"
      FIO_API_TOKEN: "${FIO_API_TOKEN}"
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    networks:
      - buldok-network
    volumes:
      - jwt_keys:/var/www/html/config/jwt

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: buldok_prod_worker
    restart: unless-stopped
    command: php bin/console-php messenger:consume scheduler_payments -vv
    environment:
      APP_ENV: prod
      APP_DEBUG: 0
      DATABASE_URL: "${DATABASE_URL}"
      MERCURE_URL: "http://mercure/.well-known/mercure"
      MERCURE_PUBLIC_URL: "https://buldok.app/.well-known/mercure"
      MERCURE_JWT_SECRET: "${MERCURE_JWT_SECRET}"
      FIO_API_TOKEN: "${FIO_API_TOKEN}"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - buldok-network

  db:
    image: mariadb:12.0.2
    container_name: buldok_prod_db
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"
      MARIADB_DATABASE: "${MARIADB_DATABASE}"
      MARIADB_USER: "${MARIADB_USER}"
      MARIADB_PASSWORD: "${MARIADB_PASSWORD}"
    healthcheck:
      test: ["CMD", "mariadb-admin", "--user=${MARIADB_USER}", "--password=${MARIADB_PASSWORD}", "--protocol=tcp", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - buldok-network

  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      # Expose Adminer on host port 8080, container port is 8080
      - "127.0.0.1:8080:8080"
    networks:
      - buldok-network
    depends_on:
      - db

  mercure:
    image: dunglas/mercure
    container_name: buldok_prod_mercure
    restart: unless-stopped
    environment:
      MERCURE_PUBLISHER_JWT_KEY: "${MERCURE_JWT_SECRET}"
      MERCURE_SUBSCRIBER_JWT_KEY: "${MERCURE_JWT_SECRET}"
      CORS_ALLOWED_ORIGINS: "https://buldok.app"
      SERVER_NAME: ":80"
    networks:
      - buldok-network

  certbot:
    image: certbot/certbot
    container_name: buldok_prod_certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    #entrypoint: "" # Disable the default entrypoint
    entrypoint: /bin/sh
    command:
      - -c
      - |
        while [ ! -d /etc/letsencrypt/live/buldok.app ]; do
          echo "Requesting initial certificate for buldok.app..."
          # The entire certbot command is on a single line to prevent parsing errors
          certbot certonly --webroot -w /var/www/certbot -d buldok.app --email me@martinruzek.cz --agree-tos --no-eff-email --non-interactive || sleep 15
        done
        echo "Certificate found, starting renewal loop..."
        trap exit TERM;
        while :; do
          certbot renew --quiet;
          sleep 12h & wait $${!};
        done;
    networks:
      - buldok-network

networks:
  buldok-network:
    driver: bridge

volumes:
  mariadb_data:
  backend_var:
  certbot_certs:
  certbot_www:
  jwt_keys:
